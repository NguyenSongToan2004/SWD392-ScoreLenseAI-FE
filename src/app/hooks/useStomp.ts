// src/app/hooks/useStomp.ts (T·∫°o m·ªôt th∆∞ m·ª•c hooks m·ªõi)

import { useRef, useEffect, useState } from 'react';
import { Client } from '@stomp/stompjs';
import SockJS from 'sockjs-client';

const STOMP_ENDPOINT = import.meta.env.VITE_STOMP_ENDPOINT;

export const useStomp = () => {
    // S·ª≠ d·ª•ng useRef ƒë·ªÉ l∆∞u tr·ªØ instance c·ªßa client.
    // useRef s·∫Ω gi·ªØ gi√° tr·ªã c·ªßa n√≥ qua c√°c l·∫ßn re-render m√† kh√¥ng trigger re-render.
    const clientRef = useRef<Client | null>(null);

    // State ƒë·ªÉ theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi, gi√∫p component bi·∫øt khi n√†o c√≥ th·ªÉ subscribe/publish.
    const [isConnected, setIsConnected] = useState(false);

    useEffect(() => {
        // Ch·ªâ ch·∫°y m·ªôt l·∫ßn khi component mount
        const token = localStorage.getItem("accessToken"); // üîë L·∫•y JWT token t·ª´ localStorage
        console.log(token);
        // 1. T·∫°o instance c·ªßa Stomp Client 
        const stompClient = new Client({
            webSocketFactory: () => new SockJS(STOMP_ENDPOINT),
            connectHeaders : {
                Authorization: token ? `Bearer ${token}` : "",
            },
            debug: (str) => {
                console.log(`STOMP DEBUG: ${str}`);
            },
            onConnect: () => {
                console.log('%c--- STOMP CONNECTION ESTABLISHED ---', 'color: green; font-weight: bold;');
                setIsConnected(true); // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ k·∫øt n·ªëi
            },
            onDisconnect: () => {
                console.log('%c--- STOMP CONNECTION CLOSED ---', 'color: red; font-weight: bold;');
                setIsConnected(false); // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ ng·∫Øt k·∫øt n·ªëi
            },
            onStompError: (frame) => {
                console.error('Broker reported error: ' + frame.headers['message']);
                console.error('Additional details: ' + frame.body);
            },
        });

        // 2. L∆∞u instance v√†o ref ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ b√™n ngo√†i useEffect
        clientRef.current = stompClient;

        // 3. K√≠ch ho·∫°t k·∫øt n·ªëi
        stompClient.activate();

        // 4. Quan tr·ªçng: H√†m d·ªçn d·∫πp (cleanup function)
        // S·∫Ω ƒë∆∞·ª£c g·ªçi khi component unmount
        return () => {
            if (stompClient.connected) {
                stompClient.deactivate();
            }
        };
    }, []); // M·∫£ng r·ªóng ƒë·∫£m b·∫£o useEffect ch·ªâ ch·∫°y 1 l·∫ßn duy nh·∫•t

    // Tr·∫£ v·ªÅ client instance v√† tr·∫°ng th√°i k·∫øt n·ªëi cho component s·ª≠ d·ª•ng
    return { client: clientRef.current, isConnected };
};